// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  // role          UserRole @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  roles                 UserRole[]

  articles Article[]
}

model Role {
  id    String     @id @default(cuid())
  name  String     @unique
  slug  String     @unique
  users UserRole[]
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Category {
  id          String            @id @default(cuid())
  name        String
  slug        String            @unique
  description String?
  image       String?
  parent      Category?         @relation("SubCategory", fields: [parentId], references: [id])
  parentId    String?
  children    Category[]        @relation("SubCategory")
  articles    ArticleCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  titleSeo       String?
  descriptionSeo String?
  keywordsSeo    String?
}

model Article {
  id       String  @id @default(cuid())
  title    String
  slug     String  @unique
  content  String
  image    String?
  author   User    @relation(fields: [authorId], references: [id])
  authorId String

  published   Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  titleSeo       String?
  descriptionSeo String?
  keywordsSeo    String?

  categories ArticleCategory[]
}

model ArticleCategory {
  articleId  String
  categoryId String
  article    Article  @relation(fields: [articleId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([articleId, categoryId])
}
