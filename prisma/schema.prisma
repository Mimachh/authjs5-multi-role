
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  // role          UserRole @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  roles                 UserRole[]

  entreprise Entreprise?
}

model Role {
  id    String     @id @default(cuid())
  name  String     @unique
  slug  String     @unique
  users UserRole[]
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Entreprise {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  address     String?
  zipCode     String?
  city        String?
  country     String?
  phone       String?
  email       String?
  logo        String?
  description String?

  createdAt DateTime @default(now())

  landingPage Landing_Page?

  metiers EntrepriseMetier[]

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Metier {
  name      String   @unique
  slug      String   @id @unique
  createdAt DateTime @default(now())

  entreprises EntrepriseMetier[]
}

model EntrepriseMetier {
  entrepriseId String
  metierId     String
  entreprise   Entreprise @relation(fields: [entrepriseId], references: [id])
  metier       Metier     @relation(fields: [metierId], references: [slug])

  @@id([entrepriseId, metierId])
}

model Entreprise_Type {
  name      String   @unique
  slug      String   @id @unique
  createdAt DateTime @default(now())
}

model Landing_Page {
  id           String     @id @default(cuid())
  entrepriseId String     @unique
  entreprise   Entreprise @relation(fields: [entrepriseId], references: [id])
}

model Day {
  id   Int    @id
  name String @unique
  slug String @unique
}
